% Alex Czaja
% Dr. Valero-Cevas, BME504 Neuromuscular Systems
% Implementation of two-element, or differential, Hill-type model

% Equations of two-element Hill-type model
% According to "Accuracy of gastrocnemius muscles forces in walking and
% running goats predicted by one-element and two-element Hill-type models"
% by Sabrina S.M. Lee et. al. published in Journal of Biomechanics

% Transfer functions
% a1_dot + ((1/tau_act1)*(beta1 + (1-beta1)*EMG(t-t_off))) * a1(t) = (1/tau_act1) * EMG(t-t_off)
% a2_dot + ((1/tau_act2)*(beta2 + (1-beta2)*a1(t))) * a2(t) = (1/tau_act2) * a1(t)
% a3_dot + ((1/tau_act3)*(beta3 + (1-beta3)*a3(t))) * a3(t) = (1/tau_act3) * a2(t)
function a_dot = activation_transfer(tau_act, beta, EMG, a)
    % Returns a_dot as vector [a1_dot, a2_dot, a3_dot]
    % Expects tau_act as vector [tau_act1, tau_act2, tau_act3],
    % beta as vector [beta1, beta2, beta3],
    % EMG as scalar value EMG(t-t_off),
    % and a as vector (a1(t), a2(t), a3(t)]
    a_dot = zeros(1, 3);
    a_dot(1) = (1/tau_act(1))*EMG - ((1/tau_act(1))*(beta(1)+(1-beta(1))*EMG))*a(1);
    a_dot(2) = (1/tau_act(2))*a(1) - ((1/tau_act(2))*(beta(2)+(1-beta(2))*a(2)))*a(2);
    a_dot(3) = (1/tau_act(3))*a(2) - ((1/tau_act(3))*(beta(3)+(1-beta(3))*a(3)))*a(3);
end

% Total muscle force
% Fm = c(F_f + F_p(l)) * cos(theta)
% Where F_f (F_f-hat in paper) is active component of the muscle fiber force,
% F_p(l) (F_p-hat(l) in paper) is passive component of muscle fiber force,
% constant c reflects the maximum isometric force generated by muscle,
% and theta is pennation angle.

% Force-length relationship (F_a-hat(l) and F_p-hat(l) in paper)
% F_a(l) = (-878.24*(l * 1.253)^2 + 2200.4*(l * 1.254) - 1192) / 186.24
% F_p(l) = exp(-1.3 + 3.8*(l * 1.253)) / 186.24
function F_l = force_length(l)
    % Returns force-length relationship F_l as vector [F_a-hat(l), F_p-hat(l)]
    % where F_a-hat corresponds to active element, F_p-hat corresponds to
    % passive element
    % l is fascicle length
    F_l = zeros(1, 2);
    F_l(1) = (-878.25*(l*1.253)^2 + 2200.4*(l*1.254) - 1192) / 186.24;
    F_l(2) = exp(-1.3 + 3.8*(l*1.253)) / 186.24;
end


% Force-velocity relationship (F_v-hat(v) in paper)
% F_v(v) = { (1 - (v/v_0)) / (1 + (v/(v_0*k)))                  if v <= 0
%          { 1.5 - 0.5*((1 + (v/v_0)) / (1 - ((7.5*v)/(v_0*k))) if v > 0
function F_v = force_velocity(v, v_0, k)
    % Returns force-velocity relationship F_v as scalar F_v-hat
    % Expects v as v(t), v_0 as maximum unloaded shortening velocity,
    % and k as force-velocity curvature
    F_v = 0;
    if v <= 0 
        F_v = (1 - (v/v_0)) / (1 + (v/(v_0*k)));
    else
        F_v = 1.5 - 0.5 * ((1 + (v/v_0)) / (1 - ((7.56*v)/(v_0*k))));
    end
end
